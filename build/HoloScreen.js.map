{"version":3,"file":"HoloScreen.js","sourceRoot":"","sources":["../HoloScreen.ts"],"names":[],"mappings":"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","sourcesContent":["class HoloScreen extends THREE.Mesh {\r\n\r\n  public holoplay:HoloPlay;\r\n  public multiViewRenderer:HoloMultiViewRenderer;\r\n\r\n  protected _depthRatio:number = 1;\r\n\r\n  constructor(holoplay:HoloPlay){\r\n\r\n\r\n\r\n\r\n    super(new THREE.PlaneGeometry(1,1),new THREE.ShaderMaterial({\r\n      vertexShader:`\r\n      varying vec2 iUv;\r\n\r\n      void main() {\r\n          iUv = uv;\r\n          vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\r\n          gl_Position = projectionMatrix * modelViewPosition;\r\n\r\n      }\r\n      `,\r\n\r\n      fragmentShader:`\r\n        uniform sampler2D multiTexture;\r\n        uniform float pitch;\r\n        uniform float tilt;\r\n        uniform float center;\r\n        uniform float subp;\r\n        uniform float tilesX;\r\n        uniform float tilesY;\r\n        uniform float numViews;\r\n\r\n\r\n        varying vec2 iUv;\r\n\r\n        vec2 texArr(in vec3 uvz, out vec2 result) {\r\n            float z = floor(uvz.z * numViews);\r\n            result.x = (mod(z, tilesX) + uvz.x) / tilesX;\r\n            result.y = (floor(z / tilesX) + uvz.y) / tilesY;\r\n            return result;\r\n        }\r\n\r\n        float Remap(float value, float from1, float to1, float from2, float to2){\r\n           return (value - from1) / (to1 - from1) * (to2 - from2) + from2;\r\n        }\r\n\r\n        void main()\r\n        {\r\n\r\n            vec3 nuv = vec3(iUv.xy, 0.0);\r\n            vec2 resultUv = vec2(0.0);\r\n\r\n\r\n            gl_FragColor = vec4(1.0);\r\n\r\n\r\n            nuv.z = (nuv.x + nuv.y * tilt) * pitch - center;\r\n            nuv.z = mod(nuv.z + ceil(abs(nuv.z)), 1.0);\r\n            gl_FragColor.r = texture2D(multiTexture, texArr(nuv , resultUv) ).r;\r\n\r\n            nuv.z = (nuv.x + subp + nuv.y * tilt) * pitch - center;\r\n            nuv.z = mod(nuv.z + ceil(abs(nuv.z)), 1.0);\r\n            gl_FragColor.g = texture2D(multiTexture, texArr(nuv , resultUv)).g;\r\n\r\n            nuv.z = (nuv.x + 2.0 * subp + nuv.y * tilt) * pitch - center;\r\n            nuv.z = mod(nuv.z + ceil(abs(nuv.z)), 1.0);\r\n            gl_FragColor.b = texture2D(multiTexture, texArr(nuv , resultUv)).b;\r\n\r\n\r\n        }\r\n      `,\r\n      uniforms:{\r\n        multiTexture: {value: holoplay.multiViewRenderer.texture},\r\n        pitch: {value:0},\r\n        tilt: {value:0},\r\n        center: {value:0},\r\n        subp: {value:0},\r\n        numViews: {value:0},\r\n        tilesX: {value:0},\r\n        tilesY: {value:0},\r\n      }\r\n    }))\r\n\r\n    this.holoplay = holoplay;\r\n    this.multiViewRenderer = holoplay.multiViewRenderer;\r\n  }\r\n\r\n  public get uniforms():any{return (this.material as THREE.ShaderMaterial).uniforms}\r\n\r\n\r\n  public updateViewConePitchAndTilt():void{\r\n    const uniforms:any = this.uniforms;\r\n    const holo:HoloPlay = this.holoplay;\r\n    if(!holo.ready) return;\r\n\r\n\r\n\r\n    var aspect = window.innerWidth / window.innerHeight;\r\n    var screenInches = (window.innerWidth /  holo.DPI)   ;\r\n    var newPitch = holo.pitch * screenInches ;\r\n    //account for tilt in measuring pitch horizontally\r\n    newPitch *= Math.cos(Math.atan(1.0 / holo.slope ));\r\n    uniforms.pitch.value = newPitch;\r\n\r\n\r\n\r\n\r\n\r\n    this.multiViewRenderer.viewCone = Math.sqrt(newPitch  * screenInches  )   *  (window.innerHeight/1600) / (5 * 2560/window.innerWidth)   * this._depthRatio;\r\n\r\n    //console.log(\"this.multiViewRenderer.viewCone = \",this.multiViewRenderer.viewCone,\"  :  \",this._depthRatio)\r\n\r\n    //tilt\r\n    var newTilt = window.innerHeight / (window.innerWidth * holo.slope);\r\n    uniforms.tilt.value = newTilt;\r\n  }\r\n\r\n  public get depthRatio():number{return this._depthRatio};\r\n  public set depthRatio(n:number){\r\n    this._depthRatio = n;\r\n    this.updateViewConePitchAndTilt();\r\n  }\r\n\r\n\r\n\r\n\r\n  public init(dpi:number, pitch:number, slope:number, center:number){\r\n        console.log(\"INIT => \",dpi,pitch,slope,center)\r\n\r\n\r\n        const uniforms:any = this.uniforms;\r\n\r\n        this.updateViewConePitchAndTilt();\r\n\r\n        //center\r\n        //I need the relationship between the amount of pixels I have moved over to the amount of lenticulars I have jumped\r\n        //ie how many pixels are there to a lenticular?\r\n        uniforms.center.value = center // ((window.innerWidth/window.innerHeight) / 1.6) ;\r\n\r\n        //uniforms.subp.value = 1/(window.innerWidth*3)\r\n        //uniforms.subp.value = 1/(this.multiViewRenderer.viewWidth*3)\r\n        //uniforms.subp.value = 1/(screenW * 3);\r\n        uniforms.subp.value = 1 / (this.multiViewRenderer.width*3)   //(dx*3) ;\r\n\r\n\r\n        uniforms.tilesX.value = this.multiViewRenderer.nbX;\r\n        uniforms.tilesY.value = this.multiViewRenderer.nbY;\r\n        uniforms.numViews.value = this.multiViewRenderer.nbView;\r\n        this.material.needsUpdate = true;\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]}