{"version":3,"file":"Demo.js","sourceRoot":"","sources":["../Demo.ts"],"names":[],"mappings":"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","sourcesContent":["class Demo extends HoloplayApp {\r\n\r\n\r\n\r\n  protected group:THREE.Group;\r\n  protected cubes:THREE.Mesh[];\r\n  protected time:number = 0;\r\n  protected light;\r\n  constructor(textureQuality:number,viewQuality:number,useEppRom:boolean=true){\r\n    super(textureQuality,viewQuality,useEppRom);\r\n\r\n    var directionalLight = this.light = new THREE.DirectionalLight(0xFFFFFF,2);\r\n    directionalLight.position.set (0, 1, 2);\r\n    this.scene.add(directionalLight);\r\n\r\n    var ambientLight = new THREE.AmbientLight(0xFFFFFF, 0.01);\r\n    this.scene.add(ambientLight);\r\n\r\n    var cubes = this.cubes = [];\r\n    var group = this.group = new THREE.Group();\r\n    //var cubeGeometry = new THREE.CubeGeometry(2,2,2)//THREE.SphereGeometry(1,30,30);\r\n    var cubeGeometry = new THREE.SphereGeometry(1,30,30);\r\n    var cubeMaterial = new THREE.MeshLambertMaterial()//{opacity:0.5,transparent:true});\r\n\r\n    var d = 35;\r\n    var d2 = d/2;\r\n    var n\r\n    var c;\r\n    for(var i = 0; i < 100; i++){\r\n\r\n      c = new THREE.Color(Math.random(),Math.random(),Math.random()).getHex();\r\n      //console.log(c)\r\n      cubes.push(new THREE.Mesh(cubeGeometry, new THREE.MeshPhysicalMaterial({color:c,metalness:Math.random()*0.5,roughness:Math.random()*0.25 }))) //cubeMaterial));\r\n\r\n      cubes[i].material.needsUpdate = true;\r\n      cubes[i].frustumCulled  = false;\r\n      cubes[i].position.set(d2-Math.random()*d,d2- Math.random()*d,d2- Math.random()*d);\r\n      cubes[i].rotation.set(Math.random(),Math.random(),Math.random());\r\n      n = 1.5 + Math.random()*1\r\n      cubes[i].scale.set(n,n*Math.random(),n*Math.random());\r\n      group.add(cubes[i]);\r\n    }\r\n    this.scene.add(group);\r\n\r\n  }\r\n\r\n  public update():void{\r\n    this.time += 0.01;\r\n\r\n    const group = this.group;\r\n    const cubes = this.cubes;\r\n\r\n    //this.light.position.y = 1 + Math.sin(this.time*5);\r\n    group.rotation.y += 0.001;\r\n    group.rotation.x += 0.0075;\r\n    group.rotation.z += 0.0015;\r\n    //group.position.z = 10+Math.sin(this.time) *10;\r\n\r\n    let i,len = cubes.length;\r\n    for(i = 0; i < len; i++){\r\n      cubes[i].rotation.x += 0.01;\r\n      cubes[i].rotation.y += 0.02;\r\n      cubes[i].rotation.z += 0.03;\r\n   }\r\n\r\n   super.update();\r\n  }\r\n\r\n\r\n}\r\n"]}